# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-12-24 17:38
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import warehouse.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, upload_to='avatars/', validators=[warehouse.validators.MaxFileSizeValidator()], verbose_name='avatar')),
                ('bio', models.TextField(blank=True, default='', verbose_name='bio')),
                ('slug', models.SlugField(verbose_name='identifiant')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Blueprint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True, verbose_name="date d'ajout")),
                ('modif', models.DateTimeField(auto_now=True, verbose_name="date d'édition")),
                ('name', models.CharField(max_length=64, verbose_name='nom')),
                ('mass', models.PositiveIntegerField(default=0, verbose_name='masse')),
                ('blocks', models.PositiveIntegerField(default=0, verbose_name='nombre de blocs')),
                ('slug', models.SlugField(verbose_name='identifiant')),
                ('image', models.ImageField(blank=True, upload_to='covers/', validators=[warehouse.validators.MaxFileSizeValidator()], verbose_name='vignette')),
                ('desc', models.TextField(blank=True, default='', verbose_name='description')),
                ('pin', models.BooleanField(default=False, verbose_name='épinglé')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blueprints', to=settings.AUTH_USER_MODEL, verbose_name='auteur')),
            ],
            options={
                'verbose_name': 'plan',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='nom')),
                ('slug', models.SlugField(verbose_name='identifiant')),
            ],
            options={
                'verbose_name': 'catégorie',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True, verbose_name="date d'ajout")),
                ('content', models.TextField(verbose_name='contenu')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL, verbose_name='auteur')),
                ('blueprint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='warehouse.Blueprint', verbose_name='plan')),
            ],
            options={
                'verbose_name': 'commentaire',
                'ordering': ['-added'],
            },
        ),
        migrations.CreateModel(
            name='FileVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True, verbose_name="date d'ajout")),
                ('file', models.FileField(upload_to='blueprints/', validators=[warehouse.validators.MaxFileSizeValidator()], verbose_name='fichier')),
                ('number', models.PositiveSmallIntegerField(default=1, verbose_name='numéro de version')),
                ('dwnlds', models.PositiveIntegerField(default=0, verbose_name='nombre de téléchargements')),
                ('blueprint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_versions', to='warehouse.Blueprint', verbose_name='plan')),
            ],
            options={
                'verbose_name': 'version de fichier',
                'verbose_name_plural': 'versions de fichier',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True, verbose_name="date d'ajout")),
                ('grade_interior', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(5)], verbose_name='note design intérieur')),
                ('grade_exterior', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(5)], verbose_name='note design extérieur')),
                ('grade_space', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(5)], verbose_name='note espace')),
                ('grade_mechanics', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(5)], verbose_name='note mécanismes')),
                ('grade_weapons', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(5)], verbose_name='note armes')),
                ('grade_maneuv', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(5)], verbose_name='note manoeuvrabilité')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='auteur')),
                ('blueprint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='warehouse.Blueprint', verbose_name='plan')),
            ],
            options={
                'verbose_name': 'appréciation',
            },
        ),
        migrations.AddField(
            model_name='blueprint',
            name='categ',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blueprints', to='warehouse.Category', verbose_name='catégorie'),
        ),
        migrations.AddField(
            model_name='user',
            name='favs',
            field=models.ManyToManyField(related_name='fans', to='warehouse.Blueprint', verbose_name='favoris'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together=set([('blueprint', 'author')]),
        ),
        migrations.AlterUniqueTogether(
            name='fileversion',
            unique_together=set([('blueprint', 'number')]),
        ),
    ]
